<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Información</title>
    <link rel="stylesheet" href="/stylesheets/estilos.css">
</head>
<body>
    <nav>
        <input type="checkbos" id="check">
        <label for="check" class="checkbtn">
            <i class="fa-solid fa-bars"></i>
        </label>
        <a href="#" class="enlace">
            <img src="img/logo.jpeg" alt="" class="logo">
            <ul>
                <li><a href="#">¿Qué son los Contenedores</a></li>
                <li><a href="#">Caso de uso de Contenedores</a></li>
                <li><a href="#">Funcionamiento Docker</a></li>
            </ul>
        </a>
    </nav>
    <section></section>



    <div>
        <h2 class="uno">¿Qué son los contenedores?</h2><br>

        <p>Los contenedores son una forma de virtualización del sistema operativo. Un solo contenedor se puede usar para ejecutar cualquier cosa,
            desde un microservicio o un proceso de software a una aplicación de mayor tamaño. Dentro de un contenedor se encuentran todos los ejecutables,
            el código binario, las bibliotecas y los archivos de configuración necesarios.Sin embargo, en comparación con los métodos de virtualización
            de máquinas o servidores, los contenedores no contienen imágenes del sistema operativo. Esto los hace más ligeros y portátiles, con una sobrecarga
            significativamente menor.En implementaciones de aplicaciones de mayor tamaño, se pueden poner en marcha varios contenedores como uno o varios clústeres
            de contenedores. Estos clústeres se pueden gestionar mediante un orquestador de contenedores, como Kubernetes.
        </p>
    </div>
    <div>
        <h2>Beneficios de los contenedores</h2>
        <p>
            Los contenedores son una forma optimizada de crear, probar,
            poner en marcha y volver a poner en marcha aplicaciones en varios entornos,
            desde un portátil local de un desarrollador hasta un centro de datos on-premises e incluso en la nube.
            Algunos de los beneficios de los contenedores son:
        </p>
        <br>
        <ul>
            <li>
                <p>
                  <h6>  Menos sobrecarga </h6><br>
                    Los contenedores requieren menos recursos del sistema que los entornos de máquinas virtuales
                     tradicionales o de hardware porque no incluyen imágenes
                    del sistema operativo.
                </p>

                <h6>Mayor portabilidad </h6><br>
                <p>Las aplicaciones que se ejecutan en contenedores se pueden poner
                  en marcha fácilmente en sistemas operativos y plataformas de hardware diferentes. </p>
                <h6>Funcionamiento mas constante</h6><br>
                <p>Los equipos de DevOps saben que las aplicaciones en contenedores van
                  a ejecutarse igual, independientemente de dónde se pongan en marcha.</p>
                <h6>Mayor eficiencia</h6><br>
                <p>Los contenedores permiten poner en marcha,
                  aplicar parches o escalar las aplicaciones con mayor rapidez.</p>
                <h6>Mejor desarrollo de aplicaciones</h6><br>
                <p>Los contenedores respaldan los esfuerzos ágiles y
                  de DevOps para acelerar los ciclos de desarrollo, prueba y producción.</p>
            </li>
        </ul>
    </div>
    <div>
        <h2>Caso de uso de Contenedores</h2>
        <p>
            Los contenedores son una forma optimizada de crear, probar, poner en marcha y volver a poner en marcha aplicaciones en varios entornos, desde un
            portátil local de un desarrollador hasta un centro de datos on-premises e incluso en la nube. Algunos de los beneficios de los contenedores son:
        </p>
        <br>
        <ul>
          <h6>Casos de uso de contenedores</h6> <br>
          <p>Algunas organizaciones utilizan contenedores para migrar las aplicaciones existentes a
            entornos más modernos. Aunque esta práctica ofrece algunos de los beneficios básicos de la
            virtualización de sistemas operativos, no ofrece
            todas las ventajas de una arquitectura de aplicaciones modular basada en contenedores.</p>
          <h6>Refactorización de las aplicaciones existentes para contenedores</h6> <br>
          <p>Aunque la refactorización requiere mucho más que la migración del rehospedaje,
            ofrece todos los beneficios de un entorno de contenedores.</p>
          <h6>Desarrollo de nuevas aplicaciones nativas del contenedor</h6> <br>
          <p>Al igual que la refactorización,
            este método permite disfrutar de todos los beneficios de los contenedores.</p>
          <h6>Más compatibilidad con las arquitecturas de microservicios</h6> <br>
          <p>Las aplicaciones distribuidas y los microservicios se pueden aislar, poner en marcha y
            escalar más fácilmente utilizando elementos básicos de contenedores individuales.</p>
            <h6>Soporte de DevOps para la integración y la puesta en marcha continuas (CI/CD)</h6> <br>
          <p>La tecnología de contenedores permite la creación, la prueba y
            la puesta en marcha optimizadas a partir de las mismas imágenes de contenedores.</p>
            <h6>Una puesta en marcha más sencilla de tareas y trabajos repetitivos</h6> <br>
            <p>Los contenedores se ponen en marcha para dar soporte a uno o varios procesos parecidos que,
               a menudo, se ejecutan en segundo plano, como las funciones ETL o los lotes de tareas.</p>
        </ul>
        </div>

</body>
</html>
